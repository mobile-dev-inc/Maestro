plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id "com.google.protobuf" version "0.8.18"
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.21.9"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.50.2'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                grpc { option 'lite' }
            }
            task.builtins {
                java { option 'lite' }
                kotlin { option 'lite' }
            }
        }
    }
}

kotlin.sourceSets.all {
    // Prevent build warnings for grpc's generated opt-in code
    languageSettings.optIn("kotlin.RequiresOptIn")
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "dev.mobile.maestro"
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }
    signingConfigs {
        debug {
            storeFile file('../debug.keystore')
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    packagingOptions {
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/io.netty.versions.properties'
    }
}

tasks.register("copyMaestroAndroid", Copy) {
    if(JavaVersion.current() != JavaVersion.VERSION_1_8){
        throw new GradleException("This build must be run with java 8")
    }
    def maestroAndroidApkPath = "outputs/apk/debug/maestro-android-debug.apk"
    def maestroAndroidApkDest = "../../maestro-client/src/main/resources"
    def maestroAndroidApkDestPath = "../../maestro-client/src/main/resources/maestro-android-debug.apk"

    from layout.buildDirectory.dir(maestroAndroidApkPath)
    into layout.buildDirectory.file(maestroAndroidApkDest)

    it.doLast {
        if (!layout.buildDirectory.file(maestroAndroidApkDestPath).get().asFile.exists())
            throw new GradleException("Error: Input source for copyMaestroAndroid doesn't exist")

        new File("./maestro-client/src/main/resources/maestro-android-debug.apk")
            .renameTo(new File("./maestro-client/src/main/resources/maestro-app.apk"))
    }
}

tasks.register("copyMaestroServer", Copy) {
    if(JavaVersion.current() != JavaVersion.VERSION_1_8){
        throw new GradleException("This build must be run with java 8")
    }
    def maestroServerApkPath = "outputs/apk/androidTest/debug/maestro-android-debug-androidTest.apk"
    def maestroServerApkDest = "../../maestro-client/src/main/resources"
    def maestroServerApkDestPath = "../../maestro-client/src/main/resources/maestro-android-debug-androidTest.apk"

    from layout.buildDirectory.dir(maestroServerApkPath)
    into layout.buildDirectory.file(maestroServerApkDest)

    it.doLast {
        if (!layout.buildDirectory.file(maestroServerApkDestPath).get().asFile.exists())
            throw new GradleException("Error: Input source for copyMaestroServer doesn't exist")

        new File("./maestro-client/src/main/resources/maestro-android-debug-androidTest.apk")
            .renameTo(new File("./maestro-client/src/main/resources/maestro-server.apk"))
    }
}

tasks.named("assemble") { finalizedBy("copyMaestroAndroid") }
tasks.named("assembleAndroidTest") { finalizedBy("copyMaestroServer") }

sourceSets {
    generated {
        java {
            srcDirs += 'build/generated/source/proto/main/grpc'
            srcDirs += 'build/generated/source/proto/main/java'
            srcDirs += 'build/generated/source/proto/main/kotlin'
        }
    }
}

dependencies {
    protobuf project(':maestro-proto')

    implementation 'io.grpc:grpc-kotlin-stub:1.3.0'
    implementation 'io.grpc:grpc-netty-shaded:1.50.2'
    implementation 'io.grpc:grpc-stub:1.50.2'
    implementation 'io.grpc:grpc-protobuf-lite:1.50.2'
    implementation 'io.grpc:grpc-okhttp:1.50.2'
    implementation 'com.google.protobuf:protobuf-kotlin-lite:3.21.8'

    implementation 'io.ktor:ktor-server-core:2.2.2'
    implementation 'io.ktor:ktor-server-cio:2.2.2'
    implementation 'io.ktor:ktor-server-content-negotiation:2.2.2'
    implementation 'io.ktor:ktor-serialization-gson:2.2.2'


    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
}
